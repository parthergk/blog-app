{
  "id": "DualThemeToggleSlider",
  "slug": "DualThemeToggleSlider",
  "title": "Recreating a Tailwind CSS Dual Theme Toggle Slider Component Using Tailwind CSS and React",
  "date": "June 14, 2025",
  "author": "Gaurav Kumar",
  "description": "In this blog post, I’ll walk you through how I recreated the Dual Theme Toggle Slider component featured on the official Tailwind CSS landing page. This interactive UI lets users drag a center divider to seamlessly toggle between light and dark themes — a sleek and modern way to showcase theme variations.",
  "tags": ["framer-motion", "parallax", "scroll"],
  "img": "/DualThemeToggleSlider/img/demo.png",
  "videoUrl": "/DualThemeToggleSlider/video/demo.mp4",
  "isFeatured": false,
  "type": "Animation",
  "seo": {
    "title": "Framer Motion Page Transitions – Smooth Animations in React",
    "description": "Learn how to use Framer Motion to create seamless and elegant page transitions in your React projects.",
    "keywords": [
      "Framer Motion",
      "React animation",
      "Page transitions",
      "Frontend tips"
    ],
    "img": "/DualThemeToggleSlider/img/demo.png"
  },
  "content": [
    {
      "type": "DemoCard",
      "props": {
        "title": "Text Parallax Demo",
        "previewUrl": "/DualThemeToggleSlider/video/demo.mp4",
        "links": [
          { "label": "Live Demo", "url": "/demo/DualThemeToggleSlider" },
          {
            "label": "Source Code",
            "url": "https://github.com/parthergk/blog-app/tree/main/components/demos/DualThemeToggleSlider"
          }
        ]
      }
    },
    {
      "type": "CodeExplanation",
      "props": {
        "heading": "Understanding the Component",
        "explanation": "This component works by layering two images on top of each other — one representing the light theme and one the dark theme. A draggable vertical bar allows users to control how much of the light theme is visible, creating a split-view effect. It gives users an instant feel of both themes in one interaction."
      }
    },
    {
      "type": "CodeExplanation",
      "props": {
        "heading": "Setting Up the Environment:",
        "explanation": "We are using React and Tailwind CSS for styling. No external UI library is used, but we’ve manually implemented all the logic using basic hooks and DOM events. Make sure your project is set up with:",
        "list": ["Tailwind CSS", "React (Vite or Create React App)"]
      }
    },
    {
      "type": "CodeExplanation",
      "props": {
        "heading": "Setting Up Dotted Background Effect :",
        "explanation": "let’s first create the basic layout of the component. This includes setting up the container with Dotted Background. The dotted effect in the background is generated using a combination of custom CSS variables and Tailwind's arbitrary values for background image and size:"
      }
    },
    {
      "type": "CodeCard",
      "props": {
        "path": "app/index.tsx",
        "code": "import React from \"react\";\n\nconst index = () => {\n  return (\n    <div className=\"bg-[#030712] p-5 flex justify-center items-center m-auto\">\n      <div className=\"h-112 p-4 sm:p-8 relative overflow-hidden rounded-lg border border-gray-800 bg-gray-950/[2.5%] bg-[image:radial-gradient(var(--pattern-fg)_1px,_transparent_0)] bg-[size:10px_10px] bg-fixed [--pattern-fg:var(--color-white)]/10\">\n      </div>\n    </div>\n  );\n};\n\nexport default index;",
        "language": "tsx"
      }
    },
    {
      "type": "CodeCard",
      "props": {
        "path": "Example code",
        "code": "bg-[image:radial-gradient(var(--pattern-fg)_1px,_transparent_0)] \nbg-[size:10px_10px] \nbg-fixed \n[--pattern-fg:var(--color-white)]/10",
        "language": "tsx"
      }
    },
    {
      "type": "CodeExplanation",
      "props": {
        "heading": "Breakdown:",
        "list": [
          "bg-[image:radial-gradient(var(--pattern-fg)_1px,_transparent_0)] This defines a custom background image using a radial gradient. It draws tiny 1px circular dots using the --pattern-fg color, spaced out with transparency in between.",
          "bg-[size:10px_10px] Sets the size of each tile in the pattern to 10px × 10px, creating an evenly spaced grid of dots.",
          "bg-fixed Makes the background fixed to the viewport, so it doesn't scroll with the content, enhancing the subtle visual effect.",
          "[--pattern-fg:var(--color-white)]/10 Defines a custom CSS variable --pattern-fg using Tailwind's opacity utility /10, which applies 10% opacity to the white color — making the dots soft and less distracting."
        ]
      }
    },
    {
      "type": "OutPutCard",
      "props": {
        "alt": "Preview of scrolling text",
        "img": "/DualThemeToggleSlider/img/output/1.png"
      }
    },
    {
      "type": "CodeExplanation",
      "props": {
        "heading": "Adding both light and dark theme images:",
        "explanation": "Setting up the light and dark theme images, and styling the layout using Tailwind CSS to closely match the original design from the Tailwind CSS landing page."
      }
    },
    {
      "type": "CodeCard",
      "props": {
        "path": "app/index.tsx",
        "code": "import React from \"react\";\nimport ImageComparison from \"./components/ImageComparison\";\n\nconst index = () => {\n  return (\n    <div className=\"bg-[#030712] p-5 flex justify-center items-center m-auto\">\n      <div className=\"h-112 p-4 sm:p-8 relative overflow-hidden rounded-lg border border-gray-800 bg-gray-950/[2.5%] bg-[image:radial-gradient(var(--pattern-fg)_1px,_transparent_0)] bg-[size:10px_10px] bg-fixed [--pattern-fg:var(--color-white)]/10\">\n        <div className=\"w-full overflow-hidden\">\n          <ImageComparison />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default index;",
        "language": "tsx"
      }
    },
    {
      "type": "CodeCard",
      "props": {
        "path": "components/ImageComparison.tsx",
        "code": "import React from \"react\";\n\nconst ImageComparison = () => {\n  return (\n    <div className=\"isolate flex h-full w-full items-center justify-center\">\n      <div className=\"h-[30.5rem] w-[375px] relative grid grid-cols-1 grid-rows-1 overflow-hidden rounded-t-4xl bg-gray-950/10 outline outline-gray-950/10 dark:outline-white/10\">\n        <div className=\"col-start-1 row-start-1\">\n          <img\n            src=\"/DualThemeToggleSlider/img/light.png\"\n            className={`absolute inset-0`}\n            alt=\"Light\"\n          />\n        </div>\n        <div className=\"col-start-1 row-start-1\">\n          <img src=\"/DualThemeToggleSlider/img/dark.png\" alt=\"Dark\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageComparison;",
        "language": "tsx"
      }
    },
    {
      "type": "OutPutCard",
      "props": {
        "alt": "Preview of scrolling text",
        "img": "/DualThemeToggleSlider/img/output/2.png"
      }
    },
    {
      "type": "Note",
      "props": {
        "text": "Framer Motion's scroll hooks work best with container elements."
      }
    },
    {
      "type": "Tip",
      "props": {
        "text": "Use useTransform to map scroll progress to transform values."
      }
    }
  ]
}
